/*
	This bunch of stocks was designed to be used as an alternative to the standard AMXX AutoExecConfig() functionality.
	With this you can create "atomatic config" for your cvars, if it is not created yet, and then execute it in synchronous mode,
	so actual cvar values will come right after execution.

	Also with this you can use alternate 'map-based configs' functionality (supports synchronous mode too).

	Standart AMXX configs sequence can be found here:
	https://github.com/alliedmodders/amxmodx/blob/27f451a868c3154a0ab0d4d70e0a650074fd485d/amxmodx/meta_api.cpp#L670
	https://github.com/alliedmodders/amxmodx/blob/27f451a868c3154a0ab0d4d70e0a650074fd485d/amxmodx/CoreConfig.cpp#L255
*/

#if defined _ac_autoconfig_included
	#endinput
#endif
#define _ac_autoconfig_included

#include amxmodx

stock const AC_NAME[] = "AC AutoConfig";
stock const AC_VERSION[] = "1.0";
stock const AC_AUTHOR[] = "mx?!";

// filename prefix for autonaming feature (can be empty)
#define AC_AUTONAME_PREFIX "plugin-"

// configs subfolder under "amxx_configsdir" (amxmodx/configs, by default) folder (can be empty)
#define AC_CFG_SUBFOLDER "plugins"

// map-based configs subfolder under "amxx_configsdir" (amxmodx/configs, by default) folder (can be empty)
#define AC_MAPCONFIGS_SUBFOLDER "plugins/maps"

// prefix for map prefix configs
#define AC_MAP_PREFIX_PREFIX "__prefix_"

// prefix for map name configs
#define AC_MAP_NAME_PREFIX "__"

// default error mode
#define AC_DEFAULT_ERROR_MODE AC_ERR_MODE__ABORT

// filename in 'amxmodx/logs' (do not use subfolder) to store errors in AC_ERR_MODE__LOG_TO_CUSTOM mode
stock const AC_CUSTOM_LOGFILE[] = "ac_autoconfig_errors.log";

enum AcErrorModeEnum {
	AC_ERR_MODE__NONE, // will do not react if error has occurred
	AC_ERR_MODE__ABORT, // will throw error using abort() in standart amxx error log
	AC_ERR_MODE__LOG_AMX, // will log error using log_amx() to normal amxx log
	AC_ERR_MODE__LOG_MSG, // will log error using log_message()
	AC_ERR_MODE__SERVER_PRINT, // will print error using server_print()
	AC_ERR_MODE__LOG_TO_CUSTOM // will log error using log_to_file() in AC_CUSTOM_LOGFILE
};

enum AcFileHandle {
	AcFileHandle_AlreadyExists = -1,
	AcFileHandle_Null
}

/**
 * Build config file path.
 *
 * @param path   Buffer to store file path
 * @param maxlen   Maximum writable length of the path buffer
 * @param filename   Config filename without file extension (.cfg). If empty, plugin filename will be used instead.
 * @param subfolder   Config subfolder under "amxx_configsdir" (amxmodx/configs, by default) folder
 * @param autoname_prefix   Filename prefix for autonaming feature (can be empty)
 * @param custom_path   Custom file path without "filename" arg (will override default file path building that uses "amxx_configsdir" & subfolder)
 *
 * @noreturn
 */
stock ac_build_config_path(path[], maxlen, const filename[] = "", const subfolder[] = AC_CFG_SUBFOLDER, const autoname_prefix[] = AC_AUTONAME_PREFIX, const custom_path[] = "") {
	new temp_filename[64];

	if(filename[0]) {
		copy(temp_filename, charsmax(temp_filename), filename);
	}
	else {
		get_plugin(-1, temp_filename, charsmax(temp_filename));
		replace_stringex(temp_filename, charsmax(temp_filename), ".amxx", "", .caseSensitive = false);
		format(temp_filename, charsmax(temp_filename), "%s%s", autoname_prefix, temp_filename);
	}

	if(custom_path[0]) {
		formatex(path, maxlen, "%s/%s.cfg", custom_path, temp_filename);
		return;
	}

	new len = get_localinfo("amxx_configsdir", path, maxlen);
	formatex(path[len], maxlen - len, "/%s%s%s.cfg", subfolder, (subfolder[0] ? "/" : ""), temp_filename);
}

/**
 * Try open file by file path to create config file.
 *
 * @param path   File path
 * @param error_mode   Behavior when an error is occurred (see AcErrorModeEnum)
 *
 * @return      AcFileHandle_AlreadyExists if file already exists
 *              AcFileHandle_Null if error was occurred (can't create file)
 *              any othe value as file handle
 */
stock AcFileHandle:ac_try_open_config_file_handle(const path[], AcErrorModeEnum:error_mode = AC_DEFAULT_ERROR_MODE) {
	if(file_exists(path)) {
		return AcFileHandle_AlreadyExists;
	}

	new file_handle = fopen(path, "w");

	if(file_handle) {
		new version[32]; get_cvar_string("amxmodx_version", version, charsmax(version));
		fprintf(file_handle, "// This file was auto-generated by AMX Mod X (v%s) using ^"%s v%s^" by ^"%s^"^n", version, AC_NAME, AC_VERSION, AC_AUTHOR);

		new filename[64], name[64], author[64];
		get_plugin(-1, filename, charsmax(filename), name, charsmax(name), version, charsmax(version), author, charsmax(author));
		fprintf(file_handle, "// Cvars for plugin ^"%s^" by ^"%s^" (%s, v%s)^n^n", name, author, filename, version);

		return AcFileHandle:file_handle;
	}

	switch(error_mode) {
		case AC_ERR_MODE__ABORT: abort(AMX_ERR_GENERAL, "Can't create '%s'", path);
		case AC_ERR_MODE__LOG_AMX: log_amx("Can't create '%s'", path);
		case AC_ERR_MODE__LOG_MSG: log_message("Can't create '%s'", path);
		case AC_ERR_MODE__SERVER_PRINT: server_print("Can't create '%s'", path);
		case AC_ERR_MODE__LOG_TO_CUSTOM: log_to_file(AC_CUSTOM_LOGFILE, "Can't create '%s'", path);
	}

	return AcFileHandle_Null;
}

/**
 * Creates a new cvar for the engine.
 *
 * @note This is just a wrapper around create_cvar() (see include/cvars.inc) but this
 *         also write cvar params to config file if valid file handle (> 0) was provided as first param.
 *
 * @note This has the same effect as register_cvar() but provides more options.
 * @note For a list of possible cvar flags see FCVAR_* constants above.
 * @note If an already existing cvar is registered it will not be duplicated.
 *       The default value is only set when the cvar is registered for the very
 *       first time since the server was started. Cvar bounds are overwritten
 *       by the create_cvar() call just as if they were re-set using
 *       set_pcvar_bounds().
 * @note The returned cvar pointer should be used with the get_pcvar_* and
 *       set_pcvar_* set of functions.
 *
 * @param file_handle          Config file handle (safe-to-use with 0 or negative value)
 * @param name          Cvar name
 * @param string        Default cvar value
 * @param flags         Optional bitsum of flags specifying cvar behavior
 * @param description   Optional description of the cvar
 * @param has_min       Optional boolean that specifies if the cvar has a
 *                      minimum value
 * @param min_val       Minimum floating point value
 * @param has_max       Optional boolean that specifies if the cvar has a
 *                      maximum value
 * @param max_val       Maximum floating point value
 *
 * @return              Unique cvar pointer
 * @error               If invalid bounds are provided (min_val > max_val or
 *                      vice versa), an error will be thrown.
 */
stock ac_create_cvar(AcFileHandle:file_handle, const name[], const string[], flags = FCVAR_NONE, const description[] = "", bool:has_min = false, Float:min_val = 0.0, bool:has_max = false, Float:max_val = 0.0) {
	new pointer = create_cvar(name, string, flags, description, has_min, min_val, has_max, max_val);

	if(_:file_handle <= 0) {
		return pointer;
	}

	fputs(_:file_handle, "^n");

	if(description[0]) {
		fprintf(_:file_handle, "// %s^n", description);
	}

	fprintf( _:file_handle,
		"// -^n\
		// Default: ^"%s^"^n",

		string
	);

	if(has_min) {
		fprintf(_:file_handle, "Minimum: ^"%f^"^n", min_val);
	}

	if(has_max) {
		fprintf(_:file_handle, "Maximum: ^"%f^"^n", max_val);
	}

	fprintf(_:file_handle, "%s ^"%s^"^n", name, string);

	return pointer;
}

/**
 * Try close file by file handle that was opened early by ac_try_open_config_file_handle().
 *
 * @note The function automatically sets the variable passed to it to 0 (AcFileHandle_Null)
 *        to aid in preventing accidental usage after closing file.
 *
 * @param file_handle   File handle (safe-to-use with 0 or negative values)
 *
 * @noreturn
 */
stock ac_try_close_config_file_handle(&AcFileHandle:file_handle) {
	if(_:file_handle > 0) {
		fputs(_:file_handle, "^n^n"); // two(three in sum with ^n from last cvar) extra rows at the end of file, as in default autoconfig feature
		fclose(_:file_handle);
		file_handle = AcFileHandle_Null;
	}
}

/**
 * Executes config file by file path, in synchronous mode.
 *
 * @param path   File path
 *
 * @noreturn
 */
stock ac_exec_config(const path[]) {
	server_cmd("exec %s", path);
	server_exec();
}

/**
 * Build map-based config file path.
 *
 * @param path   Buffer to store file path
 * @param maxlen   Maximum writable length of the path buffer
 * @param filename   Config filename without file extension (.cfg). If empty, plugin filename will be used instead.
 * @param subfolder   Config subfolder under "amxx_configsdir" (amxmodx/configs, by default) folder
 * @param autoname_prefix   Filename prefix for autonaming feature (can be empty)
 * @param custom_path   Custom file path without "filename" arg (will override default file path building that uses "amxx_configsdir" & subfolder)
 * @param prefix_mode   Search config using map prefix (true) of full map name (false)
 *
 * @return      true if file exists
 *              false otherwise
 */
stock bool:ac_build_map_config_path(path[], maxlen, const filename[] = "", const subfolder[] = AC_MAPCONFIGS_SUBFOLDER, const autoname_prefix[] = AC_AUTONAME_PREFIX, const custom_path[] = "", bool:prefix_mode) {
	new mapname[64];
	get_mapname(mapname, charsmax(mapname));

	if(prefix_mode) {
		new pos = strfind(mapname, "_");

		if(pos == -1) {
			return false;
		}

		mapname[pos] = EOS;
	}

	new temp_filename[64];

	if(filename[0]) {
		copy(temp_filename, charsmax(temp_filename), filename);
	}
	else {
		get_plugin(-1, temp_filename, charsmax(temp_filename));
		replace_stringex(temp_filename, charsmax(temp_filename), ".amxx", "", .caseSensitive = false);
		format(temp_filename, charsmax(temp_filename), "%s%s", autoname_prefix, temp_filename);
	}

	if(custom_path[0]) {
		formatex(path, maxlen, "%s/%s%s%s.cfg", custom_path, temp_filename, prefix_mode ? AC_MAP_PREFIX_PREFIX : AC_MAP_NAME_PREFIX, mapname);
		return bool:file_exists(path);
	}

	new len = get_localinfo("amxx_configsdir", path, maxlen);
	formatex(path[len], maxlen - len, "/%s%s%s%s%s.cfg", subfolder, (subfolder[0] ? "/" : ""), temp_filename, prefix_mode ? AC_MAP_PREFIX_PREFIX : AC_MAP_NAME_PREFIX, mapname);
	return bool:file_exists(path);
}